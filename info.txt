==================================================================================================
QuickExpression 已经完成，初步完成 ，没有详细测试过。目前替换掉了 expressions


==================================================================================================
发现一个严重的问题， expresssion这个类库不能解析  无参数的函数调用表达式，在parse阶段 会有错误
新的计划是：

使用pentiparser(https://github.com/petitparser/dart-petitparser)
作为解析器，自己写一个expression evaluator

==================================================================================================
meta code generator已经完成  可以生成controller、model的metacode

flutter packages pub run build_runner build --delete-conflicting-outputs
flutter packages pub run build_runner clean
==================================================================================================
表达式解析器，目前使用的是第三方的，存在的问题是 不能解析 对象内部的方法

==================================================================================================
WPF中的Action 、Behavior 是可以有的，因为这个和treebuilder没有冲突



==================================================================================================
对于子controller中 状态改变 需要更新 传入值的情况（双向绑定），在此项目中并不打算采用
因为系统不一样，并不打算完整的复制wpf那一套系统

treebuilder 更倾向于树的构建过程
所以可以有 foreach if controller code 这样的treenode
而实现类似的绑定逻辑（转换器等）以及更复杂的逻辑 则依靠子controller中的onchange属性由 用户来完成

因此 此项目也不需要 state  propertychanged  以及表达式计算 获取 property的model

controller本身管理自身的状态，子controller中发生数据变化后，通过回调 反馈给父controller
这个过程中，在某个controller中 它只能观察到它的 一级子controller 不会出现二级三级这种


==================================================================================================
